// Prisma schema for Financial Helm - Smart Weekly Budget Coach

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  weekStartDay  String   @default("monday") @map("week_start_day")
  currency      String   @default("USD")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  categories    Category[]
  transactions  Transaction[]
  weeklyBudgets WeeklyBudget[]
  carryovers    Carryover[]
  achievements  Achievement[]

  @@map("users")
}

// Category model
model Category {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  name            String
  emoji           String   @default("ðŸ“Š")
  monthlyCeiling  Decimal  @map("monthly_ceiling") @db.Decimal(10, 2)
  isActive        Boolean  @default(true) @map("is_active")
  isCustom        Boolean  @default(false) @map("is_custom")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  weeklyBudgets   WeeklyBudget[]
  carryovers      Carryover[]
  achievements    Achievement[]

  @@unique([userId, name])
  @@index([userId, isActive])
  @@map("categories")
}

// Transaction model
model Transaction {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  categoryId  String?  @map("category_id")
  date        DateTime @db.Date
  description String   @db.Text
  amount      Decimal  @db.Decimal(10, 2)
  type        String   // 'income' or 'expense'
  notes       String?  @db.Text
  source      String   @default("manual") // 'manual', 'csv', 'api'
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])

  @@index([userId, date(sort: Desc)])
  @@index([categoryId])
  @@map("transactions")
}

// Weekly Budget model
model WeeklyBudget {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  categoryId   String   @map("category_id")
  weekStart    DateTime @map("week_start") @db.Date
  weekEnd      DateTime @map("week_end") @db.Date
  weeklyLimit  Decimal  @map("weekly_limit") @db.Decimal(10, 2)
  spent        Decimal  @default(0) @db.Decimal(10, 2)
  carryover    Decimal  @default(0) @db.Decimal(10, 2)
  status       String   @default("active") // 'active', 'completed', 'archived'
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, weekStart])
  @@index([userId, weekStart])
  @@index([categoryId])
  @@map("weekly_budgets")
}

// Carryover model
model Carryover {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  categoryId String   @map("category_id")
  fromWeek   DateTime @map("from_week") @db.Date
  toWeek     DateTime @map("to_week") @db.Date
  amount     Decimal  @db.Decimal(10, 2)
  type       String   // 'positive' or 'negative'
  applied    Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId, categoryId])
  @@map("carryovers")
}

// Achievement model
model Achievement {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  categoryId    String?  @map("category_id")
  type          String   // 'four_week_streak', 'budget_master', etc.
  weeksCount    Int?     @map("weeks_count")
  surplusAmount Decimal? @map("surplus_amount") @db.Decimal(10, 2)
  achievedAt    DateTime @default(now()) @map("achieved_at")
  acknowledged  Boolean  @default(false)

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category? @relation(fields: [categoryId], references: [id])

  @@index([userId, achievedAt(sort: Desc)])
  @@map("achievements")
}
